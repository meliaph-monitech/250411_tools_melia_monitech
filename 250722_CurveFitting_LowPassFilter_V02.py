# -*- coding: utf-8 -*-
"""250722_lospassfilter_v01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RZbjTuoHa3hJhL-hAsJJl6t8zqaPSqUi
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from scipy.signal import butter, filtfilt

st.set_page_config(page_title="Curve Fitting & Low-pass Filter Comparison", layout="wide")

st.title("NIR / VIS Curve Fitting vs Low-pass Filter Explorer")

# File Upload
uploaded_file = st.file_uploader("Upload a CSV file", type="csv")

@st.cache_data
def load_csv(file):
    return pd.read_csv(file)

@st.cache_data
def curve_fitting(input_array, interval):
    m_input = input_array.copy()
    m_re = np.zeros_like(m_input)

    if interval % 2 != 0:
        interval += 1
    m_half = interval // 2

    for i in range(len(m_input)):
        if i < m_half:
            if i == 0:
                m_re[i] = m_input[i]
            else:
                target = (i * 2) + 1
                m_re[i] = np.mean(m_input[:i + i + 1])
        elif i >= len(m_input) - m_half:
            target = (len(m_input) - i) * 2 - 1
            m_re[i] = np.mean(m_input[i - ((len(m_input) - i) - 1): i + ((len(m_input) - i))])
        else:
            if i == m_half:
                m_re[i] = np.mean(m_input[i - m_half: i + m_half + 1])
            else:
                m_re[i] = m_re[i - 1] + (m_input[i + m_half] - m_input[i - m_half - 1]) / (interval + 1)
    return m_re

def segment_beads(df, column, threshold):
    start_indices = []
    end_indices = []
    signal = df[column].to_numpy()
    i = 0
    while i < len(signal):
        if signal[i] > threshold:
            start = i
            while i < len(signal) and signal[i] > threshold:
                i += 1
            end = i - 1
            start_indices.append(start)
            end_indices.append(end)
        else:
            i += 1
    return list(zip(start_indices, end_indices))

def butter_lowpass_filter(data, cutoff, fs, order):
    nyq = 0.5 * fs
    normal_cutoff = cutoff / nyq
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    y = filtfilt(b, a, data)
    return y

if uploaded_file is not None:
    df = load_csv(uploaded_file)
    st.write("Preview of uploaded data:", df.head())

    with st.sidebar:
        column = st.selectbox("Select filter column for bead segmentation:", df.columns)
        threshold = st.number_input("Enter threshold for bead segmentation:", value=0.0)
        segment_button = st.button("Segment Beads")

    if segment_button:
        beads = segment_beads(df, column, threshold)
        st.success(f"{len(beads)} beads detected.")

        for idx, (start, end) in enumerate(beads):
            bead_df = df.iloc[start:end + 1]
            nir = bead_df.iloc[:, 0].to_numpy()
            vis = bead_df.iloc[:, 1].to_numpy()

            st.subheader(f"Bead {idx+1}")

            # Curve Fitting
            interval = st.sidebar.slider(f"Curve Fitting Interval (Bead {idx+1})", 3, 101, 15, step=2)
            nir_curve = curve_fitting(nir, interval)
            vis_curve = curve_fitting(vis, interval)

            # Raw and Curve Fitting Plot
            fig = go.Figure()
            fig.add_trace(go.Scatter(y=nir, name="NIR Raw"))
            fig.add_trace(go.Scatter(y=nir_curve, name="NIR Curve Fitting"))
            fig.add_trace(go.Scatter(y=vis, name="VIS Raw"))
            fig.add_trace(go.Scatter(y=vis_curve, name="VIS Curve Fitting"))
            st.plotly_chart(fig, use_container_width=True)

            # Low-pass Filter Controls
            st.markdown("### Low-pass Filter Configuration")
            cutoff = st.slider(f"Cutoff Frequency (Bead {idx+1})", min_value=0.01, max_value=0.49, value=0.1)
            order = st.slider(f"Filter Order (Bead {idx+1})", min_value=1, max_value=10, value=3)
            fs = 1.0  # Assuming normalized sampling rate

            nir_lowpass = butter_lowpass_filter(nir, cutoff, fs, order)
            vis_lowpass = butter_lowpass_filter(vis, cutoff, fs, order)

            # Low-pass Filter Plot
            fig2 = go.Figure()
            fig2.add_trace(go.Scatter(y=nir, name="NIR Raw", line=dict(color='gray', dash='dot')))
            fig2.add_trace(go.Scatter(y=nir_lowpass, name="NIR Low-pass Filter"))
            fig2.add_trace(go.Scatter(y=vis, name="VIS Raw", line=dict(color='lightblue', dash='dot')))
            fig2.add_trace(go.Scatter(y=vis_lowpass, name="VIS Low-pass Filter"))
            st.plotly_chart(fig2, use_container_width=True)

    else:
        st.info("Set segmentation parameters and click Segment Beads to start analysis.")